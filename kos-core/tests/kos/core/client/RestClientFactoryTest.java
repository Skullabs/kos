/*
 * Copyright 2019 Skullabs Contributors (https://github.com/skullabs)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kos.core.client;

import kos.api.KosContext;
import kos.api.MutableKosContext;
import kos.core.Lang;
import kos.core.client.sample.WhatsMyIpClient;
import lombok.val;
import org.junit.jupiter.api.Test;

import static kos.core.Lang.waitFor;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

class RestClientFactoryTest {

    final KosContext kosContext = new MutableKosContext();
    final RestClientFactory factory = new RestClientFactory(kosContext);

    @Test void loadPreviouslyExposedClient(){
        val client = factory.instantiate(RestClientConfiguration.EMPTY, WhatsMyIpClient.class);
        val response = Lang.waitFor(client.myIp());

        val validIpRegEx = "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}";
        assertTrue(response.getIp().matches(validIpRegEx));
    }

    @Test void loadManuallyRegisteredClient(){
        val client = mock(CustomClient.class);

        val clientFactory = mock(AutoGeneratedRestClientFactory.class);
        doReturn(CustomClient.class).when(clientFactory).getClientType();
        doReturn(client).when(clientFactory).initialize(any());

        factory.register(clientFactory);

        val foundClient = factory.instantiate(RestClientConfiguration.EMPTY, CustomClient.class);
        assertSame(client, foundClient);
    }
}

interface CustomClient {

}