/*
 * Copyright 2019 Skullabs Contributors (https://github.com/skullabs)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kos.core.client;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.core.type.TypeReference;
import io.vertx.core.MultiMap;
import kos.api.KosConfiguration;
import kos.api.MutableKosConfiguration;
import kos.core.Lang;
import kos.core.client.RestClientConfiguration.MutableRestClientConfiguration;
import lombok.Data;
import lombok.Value;
import lombok.val;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;

import static io.vertx.core.http.HttpMethod.GET;
import static io.vertx.core.http.HttpMethod.POST;
import static org.junit.jupiter.api.Assertions.*;

class AutoGeneratedRestClientTest {
    
    KosConfiguration kosConfiguration = new MutableKosConfiguration();

    @DisplayName("SHOULD perform GET request with base URI and deserialize JSON response as Class")
    @Test void simpleGetWithURI()
    {
        val baseURI = "get";
        val conf = newConf("https://postman-echo.com/" + baseURI).build()
                .useDefaultsForNullProperties(kosConfiguration);
        val client = new TestableClient(conf);

        val extraBaseURI = "?arg1=Hello&arg2=World";
        val response = Lang.waitFor( client.execute(
            GET, extraBaseURI,
            MultiMap.caseInsensitiveMultiMap(),
            EchoResponse.class
        ));

        assertEquals("https://postman-echo.com/get?arg1=Hello&arg2=World", response.url);
        assertEquals("Hello", response.args.get("arg1"));
        assertEquals("World", response.args.get("arg2"));
        assertNull(response.data);
    }

    @DisplayName("SHOULD perform GET request without base URI and deserialize JSON response as Class")
    @Test void simpleGetWithoutURI()
    {
        val baseURI = "";
        val conf = newConf("https://postman-echo.com/" + baseURI).build()
                .useDefaultsForNullProperties(kosConfiguration);
        val client = new TestableClient(conf);

        val extraBaseURI = "get?arg1=Hello&arg2=World";
        val response = Lang.waitFor( client.execute(
            GET, extraBaseURI,
            MultiMap.caseInsensitiveMultiMap(),
            EchoResponse.class
        ));

        assertEquals("https://postman-echo.com/get?arg1=Hello&arg2=World", response.url);
        assertEquals("Hello", response.args.get("arg1"));
        assertEquals("World", response.args.get("arg2"));
        assertNull(response.data);
    }

    @DisplayName("SHOULD perform GET request with HTTP Headers and deserialize JSON response as Class")
    @Test void simpleGetWithHeaders()
    {
        val conf = newConf("https://postman-echo.com/get").build()
                .useDefaultsForNullProperties(kosConfiguration);
        val client = new TestableClient(conf);

        val headers = MultiMap.caseInsensitiveMultiMap().add("X-Hello", "World");
        val response = Lang.waitFor( client.execute(GET, "", headers, EchoResponse.class) );

        assertEquals("https://postman-echo.com/get", response.url);
        assertEquals("World", response.headers.get("x-hello"));
        assertNull(response.data);
    }

    @DisplayName("SHOULD perform POST request and deserialize JSON response as Class")
    @Test void simplePost()
    {
        val conf = newConf("https://postman-echo.com").build()
                .useDefaultsForNullProperties(kosConfiguration);
        val client = new TestableClient(conf);

        val response = Lang.waitFor( client.send(
            POST, "post",
            MultiMap.caseInsensitiveMultiMap(),
            new EchoRequest("Hello World"),
            EchoResponse.class
        ));

        assertEquals("https://postman-echo.com/post", response.url);
        assertNotNull(response.data);
        assertEquals("Hello World", response.data.getMessage());
    }

    @DisplayName("SHOULD perform POST request and deserialize JSON response as Map")
    @Test void simplePostAsMap()
    {
        val conf = newConf("https://postman-echo.com").build()
                .useDefaultsForNullProperties(kosConfiguration);
        val client = new TestableClient(conf);

        val response = Lang.waitFor( client.send(
            POST, "post",
            MultiMap.caseInsensitiveMultiMap(),
            new EchoRequest("Hello World"),
            new TypeReference<Map<String, Object>>() {}
        ));

        assertEquals("https://postman-echo.com/post", response.get("url"));
        assertNotNull(response.get("data"));
        assertEquals("Hello World", ((Map)response.get("data")).get("message"));
    }

    private static MutableRestClientConfiguration newConf(String url){
        try {
            return RestClientConfiguration.defaults()
                .url(new URL(url));
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }
}

class TestableClient extends AutoGeneratedRestClient {

    TestableClient(RestClientConfiguration configuration) {
        super(configuration);
    }
}

@Value class EchoRequest {
    String message;
}

@JsonIgnoreProperties(ignoreUnknown = true)
@Data class EchoResponse {

    String url;
    Map<String, Object> args;
    Map<String, Object> headers;
    EchoRequest data;
}