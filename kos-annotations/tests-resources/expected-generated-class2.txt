package kos.rest.sample;

import kos.core.*;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.http.HttpMethod;
import io.vertx.core.http.HttpServerOptions;
import io.vertx.ext.web.RoutingContext;

/**
 * Auto generated server configuration for {@link kos.rest.sample.ApiWithNoPath}.
 */
@injector.Singleton
@javax.annotation.processing.Generated("kos.apt.RestApiProcessor")
public class ApiWithNoPathRoutingContextHandler implements WebServerEventListener {

    private final ApiWithNoPath handler = Kos.implementationLoader
            .instanceOfOrFail(ApiWithNoPath.class);

    public void on(WebServerEventListener.BeforeDeployEvent event) {
        event.router().route( HttpMethod.GET, "/location", new Handler<RoutingContext>() {

            /**
             * Auto generated wrapper for {@link kos.rest.sample.ApiWithNoPath#retrieveLocation}.
             */
            public void handle(final RoutingContext event) {
                try {
                    /* Call original handler */
                    final java.lang.String response =
                    handler.retrieveLocation(
                        /* Read request parameters */
                    );
                    /* Wraps response as Future */
                    Lang.asFuture(response).setHandler(new Handler<AsyncResult<java.lang.String>>() {
                        public void handle( AsyncResult<java.lang.String> as ) {
                            if (as.succeeded())
                                Response.send(event, as.result());
                            else
                                Response.sendError(event, as.cause());
                        }
                    });
                } catch (Throwable cause){
                    Response.sendError(event, cause);
                }
            }
        });

    }

}
