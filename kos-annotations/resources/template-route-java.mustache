package {{packageName}};

import kos.api.*;
import kos.core.*;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.http.HttpMethod;
import io.vertx.core.http.HttpServerOptions;
import io.vertx.ext.web.RoutingContext;

/**
 * Auto generated server configuration for {@link {{packageName}}.{{simpleName}}}.
 */
@SuppressWarnings("all")
@injector.Singleton
@{{jdkGeneratedAnnotation}}("kos.apt.RestApiProcessor")
public class {{className}} implements WebServerEventListener {

    {{#methods}}
    {{#containsResponseType}}
    /**
     * Response Handler for {{httpMethod}} requests received by {@link {{simpleName}}.{{name}}}.
     */
    private static class ResponseTypeHandlerFor${{uniqueName}} implements Handler<AsyncResult<{{{unwrappedResponseType}}}>> {

        private final KosConfiguration kosConfiguration;
        private final RoutingContext routingContext;

        ResponseTypeHandlerFor${{uniqueName}}(KosConfiguration kosConfiguration, RoutingContext routingContext) {
            this.routingContext = routingContext;
            this.kosConfiguration = kosConfiguration;
        }

        public void handle( AsyncResult<{{{unwrappedResponseType}}}> as ) {
            if (as.succeeded())
                Response.send(kosConfiguration, routingContext, as.result());
            else
                Response.sendError(kosConfiguration, routingContext, as.cause());
        }
    }

    {{/containsResponseType}}
    {{/methods}}

    public void on(WebServerEventListener.BeforeDeployWebServerEvent event) {
        final KosConfiguration kosConfiguration = event.getKosConfiguration();
        final VertxFutures futures = kosConfiguration.getImplementationLoader()
                    .instanceOfOrFail(VertxFutures.class);

        final {{simpleName}} handler = kosConfiguration.getImplementationLoader()
                    .instanceOfOrFail({{simpleName}}.class);

        {{#methods}}
        {{#httpPath}}
        event.getRouter().route( HttpMethod.{{httpMethod}}, "{{.}}", new Handler<RoutingContext>() {

            /**
             * Auto generated wrapper for {@link {{packageName}}.{{simpleName}}#{{name}}}.
             */
            public void handle(final RoutingContext routingContext) {
                try {
                    /* Call original handler */
            {{#responseType}}
                    final {{{responseType}}} response =
            {{/responseType}}
                    handler.{{name}}(
                        /* Read request parameters */{{#parameters}}{{^first}},{{/first}}
                        Request.read{{data.annotation}}( kosConfiguration, routingContext, "{{data.name}}", {{data.type}}.class ){{/parameters}}
                    );
            {{#containsResponseType}}
                    /* Wraps response as Future */
                    futures.asFuture(response).setHandler(new ResponseTypeHandlerFor${{uniqueName}}(kosConfiguration, routingContext));
            {{/containsResponseType}}{{^containsResponseType}}
                    /* Sends the default response for "no content". */
                    Response.sendDefaultNoContent( kosConfiguration, routingContext );
            {{/containsResponseType}}
                } catch (Throwable cause){
                    Response.sendError(kosConfiguration, routingContext, cause);
                }
            }
        });

        {{/httpPath}}
        {{/methods}}
    }

}
