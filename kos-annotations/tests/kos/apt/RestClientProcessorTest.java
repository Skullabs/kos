/*
 * Copyright 2019 Skullabs Contributors (https://github.com/skullabs)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kos.apt;


import kos.apt.rest.RestClientProcessor;
import kos.core.exception.KosException;
import kos.core.client.AutoGeneratedRestClientFactory;
import kos.sample.rest.client.UserIpClient;
import lombok.val;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import javax.annotation.processing.Processor;
import javax.tools.Diagnostic;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class RestClientProcessorTest {

    Processor processor = new RestClientProcessor();

    @DisplayName("SHOULD generate the client implementation")
    @Test void process() throws Exception {
        val source = APT.asSource( APT.testFile(UserIpClient.class) );
        APT.runner().run( processor, source ).printErrorsIfAny( d -> {
            if ( d.getKind() == Diagnostic.Kind.ERROR )
                throw new KosException( d.toString() );
        });

        val generatedClassName = UserIpClient.class.getCanonicalName() + "AutoGeneratedRestClient";
        val generatedClass = APT.readFileAsString(APT.outputGeneratedClass( generatedClassName ));

        val expectedClass = APT.testResourceAsString("expected-generated-client.txt");
        assertEquals(expectedClass, generatedClass);
    }

    @DisplayName("SHOULD generate the factory class of a given client implementation")
    @Test void process1() throws Exception {
        val source = APT.asSource( APT.testFile(UserIpClient.class) );
        APT.runner().run( processor, source ).printErrorsIfAny( d -> {
            if ( d.getKind() == Diagnostic.Kind.ERROR )
                throw new KosException( d.toString() );
        });

        val generatedClassName = UserIpClient.class.getCanonicalName() + "AutoGeneratedRestClientFactory";
        val generatedClass = APT.readFileAsString(APT.outputGeneratedClass( generatedClassName ));

        val expectedClass = APT.testResourceAsString("expected-generated-client-factory.txt");
        assertEquals(expectedClass, generatedClass);
    }

    @DisplayName("SHOULD generate the SPI entry for the factory class of a given client implementation")
    @Test void process2() throws Exception {
        val source = APT.asSource( APT.testFile(UserIpClient.class) );
        APT.runner().run( processor, source ).printErrorsIfAny( d -> {
            if ( d.getKind() == Diagnostic.Kind.ERROR )
                throw new KosException( d.toString() );
        });

        val generatedSPIFileName = "META-INF/services/" +
                AutoGeneratedRestClientFactory.class.getCanonicalName().replace("/", ".");
        val generatedSPIFile = APT.readFileAsString(APT.outputGeneratedFile(generatedSPIFileName));

        val expectedClass = UserIpClient.class.getCanonicalName() + "AutoGeneratedRestClientFactory\n";
        assertTrue(generatedSPIFile.contains(expectedClass));
    }
}
