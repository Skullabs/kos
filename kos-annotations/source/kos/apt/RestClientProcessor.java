/*
 * Copyright 2019 Skullabs Contributors (https://github.com/skullabs)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kos.apt;

import generator.apt.SimplifiedAST;
import kos.core.Lang;
import kos.core.client.AutoGeneratedRestClientFactory;
import kos.rest.RestClient;
import lombok.val;

import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import java.io.IOException;
import java.lang.reflect.Modifier;
import java.util.List;
import java.util.stream.Collectors;

@SupportedAnnotationTypes( { "kos.rest.*" } )
public class RestClientProcessor extends AbstractKosProcessor {

    private ClassGenerator restClientGenerator, restClientFactoryGenerator;

    public RestClientProcessor() {
        super(AutoGeneratedRestClientFactory.class);
    }

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        restClientGenerator = new ClassGenerator("template-client-java.mustache", processingEnv);
        restClientFactoryGenerator = new ClassGenerator("template-client-factory-java.mustache", processingEnv);
    }

    @Override
    protected void processClasses(List<SimplifiedAST.Type> types) throws Exception {
        generateClientsFor(types);
        generateFactoriesForClientsOf(types);
    }

    private void generateClientsFor(List<SimplifiedAST.Type> types) throws IOException {
        val routes = types.stream()
                .filter(this::isInterfaceOrAbstractClass)
                .map(type -> Type.from(type, "AutoGeneratedRestClient", type.getCanonicalName()))
                .collect(Collectors.toList());

        restClientGenerator.generateClasses(routes);
    }

    private void generateFactoriesForClientsOf(List<SimplifiedAST.Type> types) throws IOException {
        val routes = types.stream()
                .filter(this::isInterfaceOrAbstractClass)
                .map(type -> Type.from(type, "AutoGeneratedRestClientFactory", type.getCanonicalName()))
                .collect(Collectors.toList());

        restClientFactoryGenerator.generateClasses(routes);
        spiGenerator.memorizeSPIFor(routes);
    }

    private boolean isInterfaceOrAbstractClass(SimplifiedAST.Type type) {
        val actualClass = Lang.classFor(type.getCanonicalName());
        val classModifiers = actualClass.getModifiers();
        return Modifier.isAbstract(classModifiers)
            || Modifier.isInterface(classModifiers);
    }

    @Override
    protected boolean matchesExpectedAnnotation(SimplifiedAST.Type type) {
        return Lang.first(
                type.getAnnotations(),
                ann -> ann.getType().equals(RestClient.class.getCanonicalName())
        ).isPresent();
    }
}
